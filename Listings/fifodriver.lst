


ARM Macro Assembler    Page 1 FifoDriver


    1 00000000                 TTL              FifoDriver
    2 00000000         ;*******************************************************
                       *********
    3 00000000         ;Description: Driver for Queue Operations
    4 00000000         ;the user.
    5 00000000         ;Name: Sahil Gogna
    6 00000000         ;Date: 11-11-17
    7 00000000         ;Class: CMPE-250
    8 00000000         ;Section: 02,Tuesday, 11:00 AM - 1:00 PM
    9 00000000         ;-------------------------------------------------------
                       --------
   10 00000000         ;Keil Template for KL46
   11 00000000         ;R. W. Melton
   12 00000000         ;September 25, 2017
   13 00000000         ;*******************************************************
                       *********
   14 00000000         ;Assembler directives
   15 00000000                 THUMB
   17 00000000         ;*******************************************************
                       *********
   18 00000000         ;Include files
   20 00000000         ;*******************************************************
                       *********
   21 00000000         ;Queue Management Record
   22 00000000 00000000 
                       IN_PTR  EQU              0           ;Buffer address for
                                                             next enqueue
   23 00000000 00000004 
                       OUT_PTR EQU              4           ;Buffer address for
                                                             next dequeue
   24 00000000 00000008 
                       BUF_STRT
                               EQU              8           ;Lowest buffer addr
                                                            ess
   25 00000000 0000000C 
                       BUF_PAST
                               EQU              12          ;First address past
                                                             end of buffer
   26 00000000 00000010 
                       BUF_SIZE
                               EQU              16          ;Size of buffer
   27 00000000 00000011 
                       NUM_ENQD
                               EQU              17          ;Number that was en
                                                            queued.
   28 00000000         ;Queue Structure Sizes
   29 00000000 00000004 
                       Q_BUF_SZ
                               EQU              4           ;Room for 80 charac
                                                            ters
   30 00000000 00000012 
                       Q_REC_SZ
                               EQU              18          ;Management record 
                                                            size
   31 00000000         ;*******************************************************
                       **********
   32 00000000                 EXPORT           InitQueue
   33 00000000                 EXPORT           Dequeue
   34 00000000                 EXPORT           Enqueue



ARM Macro Assembler    Page 2 FifoDriver


   35 00000000                 EXPORT           PutStringSB
   36 00000000                 EXPORT           PutNumHex
   37 00000000                 IMPORT           PutChar
   38 00000000                 AREA             FifoCode,CODE,READONLY
   39 00000000         ;*******************************************************
                       **********
   40 00000000         InitQueue
                               PROC             {R0-R13},{}
   41 00000000         ;This subroutine initializes the queue record structure 
                       at the address in R1 
   42 00000000         ;for the empty queue buffer at the address in R0 of size
                       , 
   43 00000000         ;(i.e., character capacity), given in R2.
   44 00000000         
   45 00000000 B507            PUSH             {R0-R2,LR}  ;Push saved registe
                                                            rs
   46 00000002         ;LDR R0,=QBuffer   ;Load R1 with &QBuffer
   47 00000002         ;LDR R1,=QRecord   ;Load R0 with &QRecord
   48 00000002 6008            STR              R0,[R1,#IN_PTR] ;Store QBuffer'
                                                            s In_ptr in the QRe
                                                            cord
   49 00000004 6048            STR              R0,[R1,#OUT_PTR] ;Store QBuffer
                                                            's Out_ptr in the Q
                                                            Record
   50 00000006 6088            STR              R0,[R1,#BUF_STRT] ;Store QBuffe
                                                            r's starting addres
                                                            s in QRecord
   51 00000008 2204            MOVS             R2,#Q_BUF_SZ ;Move the Queue bu
                                                            ffer size value int
                                                            o R2
   52 0000000A 1880            ADDS             R0,R0,R2    ;Add the &QBuffer a
                                                            nd buffer size
   53 0000000C 60C8            STR              R0,[R1,#BUF_PAST] ;Store sum of
                                                             previous command i
                                                            n QRecord
   54 0000000E 740A            STRB             R2,[R1,#BUF_SIZE] ;Store byte v
                                                            alue of size in QRe
                                                            cord
   55 00000010 2000            MOVS             R0,#0       ;Move 0 into R0
   56 00000012 7448            STRB             R0,[R1,#NUM_ENQD] ;Store Byte 0
                                                             in QRecord for num
                                                            ber currently enque
                                                            ued
   57 00000014 BD07            POP              {R0-R2,PC}  ;Pop saved register
                                                            s    
   58 00000016                 ENDP                         ;End Subroutine
   59 00000016         ;-------------------------------------------------------
                       ------------
   60 00000016         Dequeue PROC             {R0-R13},{}
   61 00000016         ;This subroutine is responsible for getting a character 
                       from
   62 00000016         ;the queue to remove it; if the queue is empty, dequeue 
                       fails
   63 00000016         ;and the carry flag is set to 1. If the queue is not emp
                       ty, get 
   64 00000016         ;address of the out_ptr and remove that entry from the q
                       ueue (Clear C
   65 00000016         ;flag)
   66 00000016         ;Input: 



ARM Macro Assembler    Page 3 FifoDriver


   67 00000016         ;R1 = &Queue Record
   68 00000016         ;Outputs: 
   69 00000016         ;R0 = Character dequeued
   70 00000016         ;APSR C Flag
   71 00000016         ;Modify: R0,APSR
   72 00000016         ;All other register remain unchanged on return
   73 00000016 B4FE            PUSH             {R1-R7}     ;Store registers ot
                                                            her than R0 and APS
                                                            R in stack
   74 00000018 7C4A            LDRB             R2,[R1,#NUM_ENQD] ;Load byte-va
                                                            lue of the current 
                                                            amount of numbers e
                                                            ngueued into R0
   75 0000001A 2A00            CMP              R2,#0       ;Compare numbers en
                                                            queued to '0'
   76 0000001C D013            BEQ              Failure     ;If there are no nu
                                                            mbers enqueued, bra
                                                            nch to failure
   77 0000001E 684B            LDR              R3,[R1,#OUT_PTR] ;Load address 
                                                            of out pointer into
                                                             R3
   78 00000020 7818            LDRB             R0,[R3,#0]  ;Load the value of 
                                                            the Out_ptr into R0
                                                             as the value to de
                                                            queue
   79 00000022 1C5B            ADDS             R3,R3,#1    ;Increment the out 
                                                            pointer by one to m
                                                            ove it forward
   80 00000024 604B            STR              R3,[R1,#OUT_PTR] ;Store new out
                                                             pointer value 
   81 00000026 1E52            SUBS             R2,R2,#1    ;decrement numbers 
                                                            enqueued by one
   82 00000028 744A            STRB             R2,[R1,#NUM_ENQD] ;Store new nu
                                                            m_enqd value
   83 0000002A 68CC            LDR              R4,[R1,#BUF_PAST] ;Load the val
                                                            ue of the Buffer si
                                                            ze into R4
   84 0000002C 42A3            CMP              R3,R4       ;Compare the out po
                                                            inter to the size o
                                                            f the Queue Buffer
   85 0000002E D206            BHS              Circulate   ;If out pointer poi
                                                            nts outside queue b
                                                            uffer, then adjust 
                                                            outpointer to start
                                                             of queue
   86 00000030 F3EF 8600 
                       ClearCarry
                               MRS              R6,APSR     ; Move to special r
                                                            egister from R3 
   87 00000034 4F41            LDR              R7,=0x20000000 ;Load R6 with ma
                                                            sk to BICS with
   88 00000036 43BE            BICS             R6,R6,R7    ;Bit clear R5 and R
                                                            6 to reset carry fl
                                                            ag without changing
                                                             the other flags
   89 00000038 F386 8800       MSR              APSR,R6     ;Move to R3 from sp
                                                            ecial register
   90 0000003C E00A            B                EndDequeue  ;End the dequeue pr
                                                            ocess



ARM Macro Assembler    Page 4 FifoDriver


   91 0000003E 688D    Circulate
                               LDR              R5,[R1,#BUF_STRT] ;Load Start o
                                                            f buffer into R5
   92 00000040 002B            MOVS             R3,R5       ;Set pointer into R
                                                            0
   93 00000042 604B            STR              R3,[R1,#OUT_PTR] ;Store new out
                                                            _ptr in R3
   94 00000044 E7F4            B                ClearCarry  ;Set Carry to show 
                                                            successful dequeue
   95 00000046 F3EF 8600 
                       Failure MRS              R6,APSR     ;Move to special re
                                                            gister from R3
   96 0000004A 4F3C            LDR              R7,=0x20000000 ;Load R4 with 0x
                                                            20000000 to set the
                                                             carry flag without
                                                             affecting other fl
                                                            ags
   97 0000004C 433E            ORRS             R6,R6,R7    ;R3 = R3 | R4, will
                                                             set off the carry 
                                                            bit (20000000 | 000
                                                            00000 = 20000000)
   98 0000004E F386 8800       MSR              APSR,R6     ;Move to R3 from sp
                                                            ecial register
   99 00000052 E7FF            B                EndDequeue  ;Branch back to the
                                                             EndWhile Label to 
                                                            reset the flag and 
                                                            prepare for next in
                                                            puts
  100 00000054 BCFE    EndDequeue
                               POP              {R1-R7}     ;Restore pushed reg
                                                            ister
  101 00000056 4770            BX               LR          ;Branch and exhange
                                                             with link register
                                                            
  102 00000058                 ENDP                         ;End the subroutine
                                                            
  103 00000058         ;-------------------------------------------------------
                       ---------
  104 00000058         Enqueue PROC             {R0-R13},{}
  105 00000058         ;If the queue is not full, enqueue a character from R0 t
                       o the queue
  106 00000058         ;and report a success by clearing the C flag. If a failu
                       re, set C flag
  107 00000058         ;Inputs:
  108 00000058         ;R0 = Character to enqueue
  109 00000058         ;R1 = Address of queue record
  110 00000058         ;Outputs:
  111 00000058         ;APSR C Flag
  112 00000058         ;Modify; APSR
  113 00000058         ;All other registers remain unchanged on return
  114 00000058 B4FF            PUSH             {R0-R7}     ;Save registers ont
                                                            o stack
  115 0000005A 7C4A            LDRB             R2,[R1,#NUM_ENQD] ;Load the num
                                                            ber of items enqueu
                                                            ed in the queue
  116 0000005C 7C0B            LDRB             R3,[R1,#BUF_SIZE] ;Load the val
                                                            ue of address of th
                                                            e buffer size into 
                                                            R3  



ARM Macro Assembler    Page 5 FifoDriver


  117 0000005E 429A            CMP              R2,R3       ;Compare R2 and R3 
                                                            to see if queue is 
                                                            full
  118 00000060 D013            BEQ              QueueIsFull ;Branch to label if
                                                             queue is full
  119 00000062 680C            LDR              R4,[R1,#IN_PTR] ;Load address o
                                                            f IN_PTR into R3
  120 00000064 7020            STRB             R0,[R4,#0]  ;Store the characte
                                                            r to enqueue in R0
  121 00000066 1C52            ADDS             R2,R2,#1    ;Increment number o
                                                            f items in queue
  122 00000068 744A            STRB             R2,[R1,#NUM_ENQD] ;Store the ne
                                                            w num_enqd into R2
  123 0000006A 1C64            ADDS             R4,R4,#1    ;Increment in point
                                                            er 
  124 0000006C 600C            STR              R4,[R1,#IN_PTR] ;Store new in_p
                                                            tr into R4
  125 0000006E 68CD            LDR              R5,[R1,#BUF_PAST] ;Load Buffer_
                                                            past into R5  
  126 00000070 42AC            CMP              R4,R5       ;Compare in_ptr to 
                                                            buffer past address
                                                            
  127 00000072 D206            BHS              CircEnQ     ;If they are equal,
                                                             circulate the in_p
                                                            tr to the beginning
                                                             of the queue
  128 00000074 F3EF 8600 
                       ClearCarryEnQ
                               MRS              R6,APSR     ; Move to special r
                                                            egister from R5 
  129 00000078 4F30            LDR              R7,=0x20000000 ;Load R6 with ma
                                                            sk to BICS with
  130 0000007A 43BE            BICS             R6,R6,R7    ;Bit clear R5 and R
                                                            6 to reset carry fl
                                                            ag without changing
                                                             the other flags
  131 0000007C F386 8800       MSR              APSR,R6     ;Move to R5 from sp
                                                            ecial register
  132 00000080 E00A            B                EndEnqueue  ;End the enqueue pr
                                                            ocess
  133 00000082 688E    CircEnQ LDR              R6,[R1,#BUF_STRT] ;Load the sta
                                                            rt address of the b
                                                            uffer into R4
  134 00000084 0034            MOVS             R4,R6       ;Move R6 into R4
  135 00000086 600C            STR              R4,[R1,#IN_PTR] ;Store the new 
                                                            in_pointer into R1
  136 00000088 E7F4            B                ClearCarryEnQ ;Branch to clear 
                                                            the C flag
  137 0000008A F3EF 8600 
                       QueueIsFull
                               MRS              R6,APSR     ;Move to special re
                                                            gister from R5
  138 0000008E 4F2B            LDR              R7,=0x20000000 ;Load R6 with 0x
                                                            20000000 to set the
                                                             carry flag without
                                                             affecting other fl
                                                            ags
  139 00000090 433E            ORRS             R6,R6,R7    ;R5 = R5 | R6, will
                                                             set off the carry 



ARM Macro Assembler    Page 6 FifoDriver


                                                            bit (20000000 | 000
                                                            00000 = 20000000)
  140 00000092 F386 8800       MSR              APSR,R6     ;Move to R5 from sp
                                                            ecial register
  141 00000096 E7FF            B                EndEnqueue  ;Branch back to the
                                                             EndEnqueue Label 
  142 00000098         
  143 00000098 BCFF    EndEnqueue
                               POP              {R0-R7}     ;Restore pushed reg
                                                            isters
  144 0000009A 4770            BX               LR          ;Branch and exhange
                                                             with link register
                                                            
  145 0000009C                 ENDP                         ;End the subroutine
                                                             
  146 0000009C         ;-------------------------------------------------------
                       ---------
  147 0000009C         ;-------------------------------------------------------
                       ---------
  148 0000009C         PutNumHex
                               PROC             {R0-R13},{}
  149 0000009C         ;This subroutine prints to the terminal screen the text 
                       hexadecimal 
  150 0000009C         ;representation of the unsigned word value in R0.  (For 
                       example, 
  151 0000009C         ;if R0 contains 0x000012FF, then 000012FF should print o
                       n the 
  152 0000009C         ;terminal.  Note:  12FF would notbe acceptable.  Do not 
                       use 
  153 0000009C         ;division to determine the hexadecimal digit values.) 
  154 0000009C         ;Inputs: 
  155 0000009C         ;R0 = Unsigned word value to print in hex
  156 0000009C         ;Modify:
  157 0000009C         ;PSR (after return, nothing else)
  158 0000009C B5FF            PUSH             {R0-R7,LR}  ;Push registers to 
                                                            save onto stack, as
                                                             well as link regis
                                                            ter
  159 0000009E BA04            REV              R4,R0       ;Reverse all the by
                                                            tes with an outer r
                                                            everse and inner re
                                                            verse
  160 000000A0 2500            MOVS             R5,#0       ;Initialize counter
                                                             to take 
  161 000000A2 21F0    loopH   MOVS             R1,#0xF0    ;Move 0xF0 into R1 
                                                            to act as initial m
                                                            ask
  162 000000A4 0022            MOVS             R2,R4       ;Move R4 into R2 fo
                                                            r AND cmd. to work
  163 000000A6 400A            ANDS             R2,R2,R1    ;And R1 and R2 to i
                                                            solate the first ni
                                                            bble of R0
  164 000000A8 0912            LSRS             R2,R2,#4    ;Shift the answer r
                                                            ight by 4 bits
  165 000000AA 0013            MOVS             R3,R2       ;Move R2 into R3
  166 000000AC 2B0A            CMP              R3,#0x0A    ;Compare R3 with 0x
                                                            A to see if it's ab
                                                            ove 9
  167 000000AE D200            BHS              MoreThanA   ;Branch if higher t



ARM Macro Assembler    Page 7 FifoDriver


                                                            han or equal to Mor
                                                            eThanA
  168 000000B0 E007            B                NotLetter   ;If R3 < 0x0A, then
                                                             it's not a letter 
                                                            value
  169 000000B2 2B0F    MoreThanA
                               CMP              R3,#0x0F    ;Compare R3 with 0x
                                                            F to see if it's be
                                                            tween 0xA and 0xF
  170 000000B4 D9FF            BLS              LessThanF   ;If it is, branch t
                                                            o LessThanF
  171 000000B6 3337    LessThanF
                               ADDS             R3,R3,#0x37 ;Add 0x37 to R3 to 
                                                            get ASCII value
  172 000000B8 0018            MOVS             R0,R3       ;Move R3 into R0 to
                                                             act as PutChar's i
                                                            nput
  173 000000BA F7FF FFFE       BL               PutChar     ;Call PutChar to di
                                                            splay value
  174 000000BE 1C6D            ADDS             R5,R5,#1    ;Increment counter
  175 000000C0 E00B            B                Return1     ;Do not compare aga
                                                            inst numbers, so br
                                                            anch to Return1
  176 000000C2 2B09    NotLetter
                               CMP              R3,#0x09    ;Compare R3 against
                                                             0x9 to see if it's
                                                             a number
  177 000000C4 D900            BLS              LessThan9   ;If R3 < 0x9, then 
                                                            Branch to LessThan9
                                                            
  178 000000C6 E027            B                Endloop     ;If R3 > 0x9, then 
                                                            R3 is not a number
  179 000000C8 2B00    LessThan9
                               CMP              R3,#0x00    ;Compare R3 against
                                                             0x0 to see it's in
                                                             between 0 and 9
  180 000000CA D200            BHS              MoreThan0   ;If R3 > 0, then Br
                                                            anch to MoreThan0
  181 000000CC E024            B                Endloop     ;Branch to EndLoop
  182 000000CE 3330    MoreThan0
                               ADDS             R3,R3,#0x30 ;Add 0x30 to R3 to 
                                                            get the ASCII value
                                                               
  183 000000D0 0018            MOVS             R0,R3       ;Move ASCII value i
                                                            nto R0 to print it
  184 000000D2 F7FF FFFE       BL               PutChar     ;Put the character 
                                                            on the terminal
  185 000000D6 1C6D            ADDS             R5,R5,#1    ;Increment counter
  186 000000D8 E7FF            B                Return1     ;Branch to Return1
  187 000000DA 0909    Return1 LSRS             R1,R1,#4    ;Shift 0xF0 to beco
                                                            me 0x0F for new mas
                                                            k
  188 000000DC 0022            MOVS             R2,R4       ;Move R4 into R2 to
                                                             prepare for next 
  189 000000DE 400A            ANDS             R2,R2,R1    ;And R4 and R1 agai
                                                            n for the remaining
                                                             nibble of the byte
                                                            
  190 000000E0 0013            MOVS             R3,R2       ;Move Anded result 



ARM Macro Assembler    Page 8 FifoDriver


                                                            into R3
  191 000000E2 2B0A            CMP              R3,#0x0A    ;Compare R3 against
                                                             0x0A to see if it'
                                                            s a letter
  192 000000E4 D200            BHS              MoreThanA2  ;If R3 > 0x0A, it m
                                                            ay be considered a 
                                                            letter
  193 000000E6 E008            B                NotLetter2  ;If R3 < 0x0A, it i
                                                            s not a letter
  194 000000E8 2B0F    MoreThanA2
                               CMP              R3,#0x0F    ;Compare R3 against
                                                             0x0F to see if it'
                                                            s in range
  195 000000EA D900            BLS              LessThanF2  ;If R3 < 0x0F, it i
                                                            s a letter
  196 000000EC E014            B                Endloop     ;If R3 > 0x0F, it i
                                                            s not a hex letter
  197 000000EE 3337    LessThanF2
                               ADDS             R3,R3,#0x37 ;Add 37 to R3 to ge
                                                            t ASCII value
  198 000000F0 0018            MOVS             R0,R3       ;Move R3 into R0 as
                                                             input for PutChar
  199 000000F2 F7FF FFFE       BL               PutChar     ;Call PutChar subro
                                                            utine
  200 000000F6 1C6D            ADDS             R5,R5,#1    ;Increment counter
  201 000000F8 E00B            B                Return2     ;Return2 will move 
                                                            to Return2 to shift
                                                             byte 
  202 000000FA 2B09    NotLetter2
                               CMP              R3,#0x09    ;Compare R3 against
                                                             0x09 to see if it'
                                                            s a number
  203 000000FC D900            BLS              LessThan9A  ;If R3 < 0x09, it c
                                                            an be considered a 
                                                            number
  204 000000FE E00B            B                Endloop     ;If R3 > 0x09, it i
                                                            s not a number
  205 00000100 2B00    LessThan9A
                               CMP              R3,#0x00    ;Compare R3 against
                                                             0 to see if is bet
                                                            ween 0 and 9
  206 00000102 D200            BHS              MoreThan0A  ;If R3 > 0x00, it's
                                                             in the range
  207 00000104 E008            B                Endloop     ;If R3 < 0x00, it's
                                                             out of range
  208 00000106 3330    MoreThan0A
                               ADDS             R3,R3,#0x30 ;Add 0x30 to ASCII 
                                                            value
  209 00000108 0018            MOVS             R0,R3       ;Move R3 into R0 to
                                                             print out the char
                                                            acter
  210 0000010A F7FF FFFE       BL               PutChar     ;Display character 
                                                            on terminal
  211 0000010E 1C6D            ADDS             R5,R5,#1    ;Increment counter
  212 00000110 E7FF            B                Return2     ;Branch to Return2
  213 00000112 0A24    Return2 LSRS             R4,R4,#8    ;Shift the word rig
                                                            ht by 8 bits to wor
                                                            k on next byte
  214 00000114 2D08            CMP              R5,#8       ;Compare R4 to zero



ARM Macro Assembler    Page 9 FifoDriver


                                                             to see if you have
                                                             fully shifted all 
                                                            the bits
  215 00000116 D1C4            BNE              loopH       ;If not equal to ze
                                                            ro, then loop again
                                                             to get the hex val
                                                            ue
  216 00000118 BDFF    Endloop POP              {R0-R7,PC}  ;Pop R0-R7, as well
                                                             as PC
  217 0000011A                 ENDP                         ;End the subroutine
                                                            
  218 0000011A         ;-------------------------------------------------------
                       ---------
  219 0000011A         PutStringSB
                               PROC             {R0-R13},{}
  220 0000011A         ;PutStringSB is a subroutine that displays a string
  221 0000011A         ;on the terminal keyboard from memory starting at 
  222 0000011A         ;the address in R0
  223 0000011A         ;R0 = Initially the memory address of the String put int
                       o the terminal
  224 0000011A         ;R1 = Buffer Capacity
  225 0000011A         ;R2 = This Reg. gets R0's contents before calling GetCha
                       r, which will overwrite R0
  226 0000011A         ;R3 = Loop Counter
  227 0000011A B50C            PUSH             {R2,R3,LR}  ;Move saced registe
                                                            rs
  228 0000011C         
  229 0000011C 4602            MOV              R2,R0       ;Move R0 into R2
  230 0000011E 2300            MOVS             R3,#0       ;Initialize counter
                                                            
  231 00000120 5CD0    WhilePut
                               LDRB             R0,[R2,R3]  ;Load value of word
                                                            's address with off
                                                            set R3 into R0
  232 00000122 2800            CMP              R0,#0       ;Compare R0 to Null
                                                            
  233 00000124 D005            BEQ              PutNull     ;Branch if R0 = Nul
                                                            l (0)
  234 00000126 F7FF FFFE       BL               PutChar     ;Call PutChar Subro
                                                            utine
  235 0000012A 1C5B            ADDS             R3,R3,#1    ;Increment counter
  236 0000012C 428B            CMP              R3,R1       ;Compare loop count
                                                            er to max_string si
                                                            ze
  237 0000012E D200            BHS              PutNull     ;If counter > strin
                                                            g size, then branch
                                                             to the PutNull
  238 00000130 E7F6            B                WhilePut    ;branch back to Beg
                                                            inning of loop
  239 00000132         
  240 00000132 2000    PutNull MOVS             R0,#0       ;Move a null into R
                                                            0
  241 00000134 F7FF FFFE       BL               PutChar     ;Display the charac
                                                            ter on the terminal
                                                            
  242 00000138         
  243 00000138         
  244 00000138         ;EndWhile    
  245 00000138 BD0C            POP              {R2,R3,PC}  ;Pop saved register



ARM Macro Assembler    Page 10 FifoDriver


                                                                     
  246 0000013A                 ENDP                         ;End Process
  247 0000013A         ;-------------------------------------------------------
                       --------
  248 0000013A                 END
              00 00 20000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=inter
work --depend=.\objects\fifodriver.d -o.\objects\fifodriver.o -I.\RTE\_Target_1
 -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.13.0\Device\Include -IC:\Keil_v5
\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION S
ETA 524" --predefine="MKL46Z256xxx4 SETA 1" --list=.\listings\fifodriver.lst ..
\..\Exercise11\FIFODriver.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CircEnQ 00000082

Symbol: CircEnQ
   Definitions
      At line 133 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 127 in file ..\..\Exercise11\FIFODriver.s
Comment: CircEnQ used once
Circulate 0000003E

Symbol: Circulate
   Definitions
      At line 91 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 85 in file ..\..\Exercise11\FIFODriver.s
Comment: Circulate used once
ClearCarry 00000030

Symbol: ClearCarry
   Definitions
      At line 86 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 94 in file ..\..\Exercise11\FIFODriver.s
Comment: ClearCarry used once
ClearCarryEnQ 00000074

Symbol: ClearCarryEnQ
   Definitions
      At line 128 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 136 in file ..\..\Exercise11\FIFODriver.s
Comment: ClearCarryEnQ used once
Dequeue 00000016

Symbol: Dequeue
   Definitions
      At line 60 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 33 in file ..\..\Exercise11\FIFODriver.s
Comment: Dequeue used once
EndDequeue 00000054

Symbol: EndDequeue
   Definitions
      At line 100 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 90 in file ..\..\Exercise11\FIFODriver.s
      At line 99 in file ..\..\Exercise11\FIFODriver.s

EndEnqueue 00000098

Symbol: EndEnqueue
   Definitions
      At line 143 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 132 in file ..\..\Exercise11\FIFODriver.s
      At line 141 in file ..\..\Exercise11\FIFODriver.s

Endloop 00000118



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: Endloop
   Definitions
      At line 216 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 178 in file ..\..\Exercise11\FIFODriver.s
      At line 181 in file ..\..\Exercise11\FIFODriver.s
      At line 196 in file ..\..\Exercise11\FIFODriver.s
      At line 204 in file ..\..\Exercise11\FIFODriver.s
      At line 207 in file ..\..\Exercise11\FIFODriver.s

Enqueue 00000058

Symbol: Enqueue
   Definitions
      At line 104 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 34 in file ..\..\Exercise11\FIFODriver.s
Comment: Enqueue used once
Failure 00000046

Symbol: Failure
   Definitions
      At line 95 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 76 in file ..\..\Exercise11\FIFODriver.s
Comment: Failure used once
FifoCode 00000000

Symbol: FifoCode
   Definitions
      At line 38 in file ..\..\Exercise11\FIFODriver.s
   Uses
      None
Comment: FifoCode unused
InitQueue 00000000

Symbol: InitQueue
   Definitions
      At line 40 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 32 in file ..\..\Exercise11\FIFODriver.s
Comment: InitQueue used once
LessThan9 000000C8

Symbol: LessThan9
   Definitions
      At line 179 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 177 in file ..\..\Exercise11\FIFODriver.s
Comment: LessThan9 used once
LessThan9A 00000100

Symbol: LessThan9A
   Definitions
      At line 205 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 203 in file ..\..\Exercise11\FIFODriver.s
Comment: LessThan9A used once



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

LessThanF 000000B6

Symbol: LessThanF
   Definitions
      At line 171 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 170 in file ..\..\Exercise11\FIFODriver.s
Comment: LessThanF used once
LessThanF2 000000EE

Symbol: LessThanF2
   Definitions
      At line 197 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 195 in file ..\..\Exercise11\FIFODriver.s
Comment: LessThanF2 used once
MoreThan0 000000CE

Symbol: MoreThan0
   Definitions
      At line 182 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 180 in file ..\..\Exercise11\FIFODriver.s
Comment: MoreThan0 used once
MoreThan0A 00000106

Symbol: MoreThan0A
   Definitions
      At line 208 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 206 in file ..\..\Exercise11\FIFODriver.s
Comment: MoreThan0A used once
MoreThanA 000000B2

Symbol: MoreThanA
   Definitions
      At line 169 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 167 in file ..\..\Exercise11\FIFODriver.s
Comment: MoreThanA used once
MoreThanA2 000000E8

Symbol: MoreThanA2
   Definitions
      At line 194 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 192 in file ..\..\Exercise11\FIFODriver.s
Comment: MoreThanA2 used once
NotLetter 000000C2

Symbol: NotLetter
   Definitions
      At line 176 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 168 in file ..\..\Exercise11\FIFODriver.s
Comment: NotLetter used once
NotLetter2 000000FA

Symbol: NotLetter2



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 202 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 193 in file ..\..\Exercise11\FIFODriver.s
Comment: NotLetter2 used once
PutNull 00000132

Symbol: PutNull
   Definitions
      At line 240 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 233 in file ..\..\Exercise11\FIFODriver.s
      At line 237 in file ..\..\Exercise11\FIFODriver.s

PutNumHex 0000009C

Symbol: PutNumHex
   Definitions
      At line 148 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 36 in file ..\..\Exercise11\FIFODriver.s
Comment: PutNumHex used once
PutStringSB 0000011A

Symbol: PutStringSB
   Definitions
      At line 219 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 35 in file ..\..\Exercise11\FIFODriver.s
Comment: PutStringSB used once
QueueIsFull 0000008A

Symbol: QueueIsFull
   Definitions
      At line 137 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 118 in file ..\..\Exercise11\FIFODriver.s
Comment: QueueIsFull used once
Return1 000000DA

Symbol: Return1
   Definitions
      At line 187 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 175 in file ..\..\Exercise11\FIFODriver.s
      At line 186 in file ..\..\Exercise11\FIFODriver.s

Return2 00000112

Symbol: Return2
   Definitions
      At line 213 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 201 in file ..\..\Exercise11\FIFODriver.s
      At line 212 in file ..\..\Exercise11\FIFODriver.s

WhilePut 00000120

Symbol: WhilePut



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 231 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 238 in file ..\..\Exercise11\FIFODriver.s
Comment: WhilePut used once
loopH 000000A2

Symbol: loopH
   Definitions
      At line 161 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 215 in file ..\..\Exercise11\FIFODriver.s
Comment: loopH used once
30 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BUF_PAST 0000000C

Symbol: BUF_PAST
   Definitions
      At line 25 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 53 in file ..\..\Exercise11\FIFODriver.s
      At line 83 in file ..\..\Exercise11\FIFODriver.s
      At line 125 in file ..\..\Exercise11\FIFODriver.s

BUF_SIZE 00000010

Symbol: BUF_SIZE
   Definitions
      At line 26 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 54 in file ..\..\Exercise11\FIFODriver.s
      At line 116 in file ..\..\Exercise11\FIFODriver.s

BUF_STRT 00000008

Symbol: BUF_STRT
   Definitions
      At line 24 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 50 in file ..\..\Exercise11\FIFODriver.s
      At line 91 in file ..\..\Exercise11\FIFODriver.s
      At line 133 in file ..\..\Exercise11\FIFODriver.s

IN_PTR 00000000

Symbol: IN_PTR
   Definitions
      At line 22 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 48 in file ..\..\Exercise11\FIFODriver.s
      At line 119 in file ..\..\Exercise11\FIFODriver.s
      At line 124 in file ..\..\Exercise11\FIFODriver.s
      At line 135 in file ..\..\Exercise11\FIFODriver.s

NUM_ENQD 00000011

Symbol: NUM_ENQD
   Definitions
      At line 27 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 56 in file ..\..\Exercise11\FIFODriver.s
      At line 74 in file ..\..\Exercise11\FIFODriver.s
      At line 82 in file ..\..\Exercise11\FIFODriver.s
      At line 115 in file ..\..\Exercise11\FIFODriver.s
      At line 122 in file ..\..\Exercise11\FIFODriver.s

OUT_PTR 00000004

Symbol: OUT_PTR
   Definitions
      At line 23 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 49 in file ..\..\Exercise11\FIFODriver.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 77 in file ..\..\Exercise11\FIFODriver.s
      At line 80 in file ..\..\Exercise11\FIFODriver.s
      At line 93 in file ..\..\Exercise11\FIFODriver.s

Q_BUF_SZ 00000004

Symbol: Q_BUF_SZ
   Definitions
      At line 29 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 51 in file ..\..\Exercise11\FIFODriver.s
Comment: Q_BUF_SZ used once
Q_REC_SZ 00000012

Symbol: Q_REC_SZ
   Definitions
      At line 30 in file ..\..\Exercise11\FIFODriver.s
   Uses
      None
Comment: Q_REC_SZ unused
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

PutChar 00000000

Symbol: PutChar
   Definitions
      At line 37 in file ..\..\Exercise11\FIFODriver.s
   Uses
      At line 173 in file ..\..\Exercise11\FIFODriver.s
      At line 184 in file ..\..\Exercise11\FIFODriver.s
      At line 199 in file ..\..\Exercise11\FIFODriver.s
      At line 210 in file ..\..\Exercise11\FIFODriver.s
      At line 234 in file ..\..\Exercise11\FIFODriver.s
      At line 241 in file ..\..\Exercise11\FIFODriver.s

1 symbol
374 symbols in table
