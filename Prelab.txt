					TTL Pre-lab 12
;****************************************************************
;Description: Pre-lab subroutines for Exercise 12
;Name: Sahil Gogna
;Date: 11-28-17
;Class: CMPE-250
;Section: 02,Tuesday, 11:00 AM - 1:00 PM
;-----------------------------------------------------------------
DisplayChoices	PROC {R0-R13},{}
;Subroutine that displays all the choices to the user
;Inputs: N/A
;Outputs:
;Displays the choices in R0
			PUSH {R0-R1,LR}		;Push registers to modify into stack
			MOVS R1,#MAX_STRING	;Set a buffer capacity
			BL CRLF				;Enter Key
			LDR R0,=DS			;Load Strongly Disagree choice
			BL PutStringSB		;Display the choice
			BL CRLF				;Enter Key
			LDR R0,=DM			;Load Disagree moderately
			BL PutStringSB		;Display the choice
			BL CRLF				;Enter Key
			LDR R0,=DL			;Load Disagree a little
			BL PutStringSB		;Display the choice
			BL CRLF				;Enter Key
			LDR R0,=NAND		;Load neither agree nor disagree prompt
			BL PutStringSB		;Display the choice
			BL CRLF				;Enter Key
			LDR R0,=AL			;Load agree a little prompt
			BL PutStringSB		;Display the choice
			BL CRLF				;Enter Key
			LDR R0,=AM			;Load agree moderately choice
			BL PutStringSB		;Display the choice
			BL CRLF				;Enter Key
			LDR R0,=AS			;Load agree strongly
			BL CRLF				;Enter Key
			POP {R0-R1,PC}		;Pop registers
			ENDP				;End subroutine
;-------------------------------------------------------------------
CheckChoices	PROC {R0-R13},{}
;Subroutine that checks the users choices
;Inputs: 
;R0 = Holds the answer that the user typed.
;R1 = Memory address of choice
;Outputs: Stores answer choice in memory
				PUSH {R1}			;Push registers to modify onto stack.
				CMP R0,#'a'			;Compare input to 'a'
				BHS checktheZ		;Checks if input is less than z
				B endCheckChoices	;If it is not zero, then
checktheZ		CMP R0,#'z'		 	;Compare input to 'z'
				BLS validLetter	 	;It's valid if in the range
				BHS endCheckChoices	;If input > 'z,' end the checker
validLetter		SUBS R0,R0,#0x20 	;Convert to ASCII
				STRB R0,[R1,#0]		;Store answer choice into memory
				ADDS R1,R1,#1		;Increment pointer
endCheckChoices POP {R1}			;Pop saved registers
				BX LR				;Branch and exchange back to link register
				ENDP				;End the subroutine
;---------------------------------------------------------------
Decide			PROC{R0-R13},{}
;This subroutine gives the user their personality type
;Inputs:
;R0 = M[choices]
;R1 = Score
;R2 = Counter for Size of Array
;Outputs:
;R0 = Your personality type
				PUSH {LR}		;Push LR
				MOVS R2,#0		;Initialize array counter
DecideLoop		CMP R2,#10		;When counter = 10, array has been fully traversed through
				BEQ EndDecide	;Branch if equal to EndDecide 
				LDRB R3,[R0,#0]	;Load user choice
				ADDS R2,R2,#1	;Increment counter by one
				CMP R3,#'A'		;Check if answer is 'A'
				BEQ NoIncrement	;If so, don't increment
				CMP R3,#'B'		;Check if answer is 'B'
				BEQ Increment	;If so, do increment
				CMP R3,#'C'		;Check if answer is 'C'
				BEQ Increment	;If so, do increment
				CMP R3,#'D'		;Check if answer is 'D'
				BEQ NoIncrement	;If so, don't increment
				CMP R3,#'E'		;Check if answer is 'E'
				BEQ Increment	;If so, do increment
				CMP R3,#'F'		;Check if answer is 'F'
				BEQ Increment	;If so, do increment
				CMP R3,#'G'		;Check if answer is 'G'
				BEQ NoIncrement	;If so, don't increment
NoIncrement		B DecideLoop	;Keep traversing through array of answers
Increment		ADDS R1,R1,#1	;Increment score
EndDecide		POP {LR}		;Pop LR
				ENDP			;End subroutine
;------------------------------------------------------------------
Init_GPIO	PROC {R0-R13},{}
;Enables port/modules to activate lights on KL46 FDRM Board
			PUSH {R0-R3}
;Enabling clock for PORT D and E modules
			LDR R0,=SIM_SCGC5					;Load into R0 &SIM_SCGC5
			LDR R1,=(SIM_SCGC5_PORTD_MASK :O: \	;Load into R1 the orring 
					 SIM_SCGC5_PORTE_MASK)		;of Port D and Port E mem. addresses
			LDR R2,[R0,#0]						;Load SCGC5 value
			ORRS R2,R2,R1						;Set the clock for Port D and E
			STR R2,[R0,#0]						;Store the set values into memory address of SIM_SCGC5
;Select PORT E Pin 29 for GPIO to red LED
			LDR R0,=PORTE_BASE
			LDR R1,=SET_PTE29_GPIO
			STR R1,[R0,#PORTE_PCR29_OFFSET]
;Sekect PORT D Pin 5 for GPIO to green LED
			LDR R0,=PORTD_BASE
			LDR R1,=SET_PTD5_GPIO
			STR R1,[R0,#PORTD_PCR5_OFFSET]
;Select data direction (input or output)
			;RED LED 
			LDR R0,=FGPIOD_BASE
			LDR R1,=LED_PORTD_MASK
			STR R1,[R0,#GPIO_PDDR_OFFSET]
			;GREEN LED 
			LDR R0,=FGPIOE_BASE
			LDR R1,=LED_PORTE_MASK
			STR R1,[R0,#GPIO_PDDR_OFFSET]
			
			;RED LED OFF
			LDR R0,=FGPIOE_BASE
			LDR R1,=LED_RED_MASK
			STR R1,[R0,#GPIO_PSOR_OFFSET]
			
			;GREEN LED OFF
			LDR R0,=FGPIOD_BASE
			LDR R1,=LED_GREEN_MASK
			STR R1,[R0,#GPIO_PSOR_OFFSET]
			
			;RED LED ON
			LDR R0,=FGPIOE_BASE
			LDR R1,=LED_RED_MASK
			STR R1,[R0,#GPIO_PCOR_OFFSET]
			
			;GREEN LED ON
			LDR R0,=FGPIOD_BASE
			LDR R1,=LED_GREEN_MASK
			STR R1,[R0,#GPIO_PCOR_OFFSET]
			
			POP {R0-R3}
			ENDP